/*
 * This file is generated by jOOQ.
 */
package com.kopivad.testingsystem.model.db.tables;


import com.kopivad.testingsystem.model.db.Indexes;
import com.kopivad.testingsystem.model.db.Keys;
import com.kopivad.testingsystem.model.db.TestingSystem;
import com.kopivad.testingsystem.model.db.tables.records.UserResponcesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserResponces extends TableImpl<UserResponcesRecord> {

    private static final long serialVersionUID = -1348563698;

    /**
     * The reference instance of <code>testing_system.user_responces</code>
     */
    public static final UserResponces USER_RESPONCES = new UserResponces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserResponcesRecord> getRecordType() {
        return UserResponcesRecord.class;
    }

    /**
     * The column <code>testing_system.user_responces.id</code>.
     */
    public final TableField<UserResponcesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>testing_system.user_responces.session_code</code>.
     */
    public final TableField<UserResponcesRecord, String> SESSION_CODE = createField(DSL.name("session_code"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>testing_system.user_responces.answer_id</code>.
     */
    public final TableField<UserResponcesRecord, Long> ANSWER_ID = createField(DSL.name("answer_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testing_system.user_responces.question_id</code>.
     */
    public final TableField<UserResponcesRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>testing_system.user_responces</code> table reference
     */
    public UserResponces() {
        this(DSL.name("user_responces"), null);
    }

    /**
     * Create an aliased <code>testing_system.user_responces</code> table reference
     */
    public UserResponces(String alias) {
        this(DSL.name(alias), USER_RESPONCES);
    }

    /**
     * Create an aliased <code>testing_system.user_responces</code> table reference
     */
    public UserResponces(Name alias) {
        this(alias, USER_RESPONCES);
    }

    private UserResponces(Name alias, Table<UserResponcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserResponces(Name alias, Table<UserResponcesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserResponces(Table<O> child, ForeignKey<O, UserResponcesRecord> key) {
        super(child, key, USER_RESPONCES);
    }

    @Override
    public Schema getSchema() {
        return TestingSystem.TESTING_SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_RESPONCES_FK323KVT7ONI5T0B0TR570YYN9T, Indexes.USER_RESPONCES_FKT4X7J4GV9GNVW9EQ16VQFQI46, Indexes.USER_RESPONCES_PRIMARY);
    }

    @Override
    public Identity<UserResponcesRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_RESPONCES;
    }

    @Override
    public UniqueKey<UserResponcesRecord> getPrimaryKey() {
        return Keys.KEY_USER_RESPONCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserResponcesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserResponcesRecord>>asList(Keys.KEY_USER_RESPONCES_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserResponcesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserResponcesRecord, ?>>asList(Keys.FKT4X7J4GV9GNVW9EQ16VQFQI46, Keys.FK323KVT7ONI5T0B0TR570YYN9T);
    }

    public Answers answers() {
        return new Answers(this, Keys.FKT4X7J4GV9GNVW9EQ16VQFQI46);
    }

    public Questions questions() {
        return new Questions(this, Keys.FK323KVT7ONI5T0B0TR570YYN9T);
    }

    @Override
    public UserResponces as(String alias) {
        return new UserResponces(DSL.name(alias), this);
    }

    @Override
    public UserResponces as(Name alias) {
        return new UserResponces(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserResponces rename(String name) {
        return new UserResponces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserResponces rename(Name name) {
        return new UserResponces(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
