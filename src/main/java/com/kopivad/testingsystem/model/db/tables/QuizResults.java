/*
 * This file is generated by jOOQ.
 */
package com.kopivad.testingsystem.model.db.tables;


import com.kopivad.testingsystem.model.db.Indexes;
import com.kopivad.testingsystem.model.db.Keys;
import com.kopivad.testingsystem.model.db.TestingSystem;
import com.kopivad.testingsystem.model.db.tables.records.QuizResultsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizResults extends TableImpl<QuizResultsRecord> {

    private static final long serialVersionUID = -1851803132;

    /**
     * The reference instance of <code>testing_system.quiz_results</code>
     */
    public static final QuizResults QUIZ_RESULTS = new QuizResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizResultsRecord> getRecordType() {
        return QuizResultsRecord.class;
    }

    /**
     * The column <code>testing_system.quiz_results.id</code>.
     */
    public final TableField<QuizResultsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * Create a <code>testing_system.quiz_results</code> table reference
     */
    public QuizResults() {
        this(DSL.name("quiz_results"), null);
    }

    /**
     * Create an aliased <code>testing_system.quiz_results</code> table reference
     */
    public QuizResults(String alias) {
        this(DSL.name(alias), QUIZ_RESULTS);
    }

    /**
     * Create an aliased <code>testing_system.quiz_results</code> table reference
     */
    public QuizResults(Name alias) {
        this(alias, QUIZ_RESULTS);
    }

    private QuizResults(Name alias, Table<QuizResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizResults(Name alias, Table<QuizResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuizResults(Table<O> child, ForeignKey<O, QuizResultsRecord> key) {
        super(child, key, QUIZ_RESULTS);
    }

    @Override
    public Schema getSchema() {
        return TestingSystem.TESTING_SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUIZ_RESULTS_PRIMARY);
    }

    @Override
    public Identity<QuizResultsRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUIZ_RESULTS;
    }

    @Override
    public UniqueKey<QuizResultsRecord> getPrimaryKey() {
        return Keys.KEY_QUIZ_RESULTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<QuizResultsRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizResultsRecord>>asList(Keys.KEY_QUIZ_RESULTS_PRIMARY);
    }

    @Override
    public QuizResults as(String alias) {
        return new QuizResults(DSL.name(alias), this);
    }

    @Override
    public QuizResults as(Name alias) {
        return new QuizResults(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizResults rename(String name) {
        return new QuizResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizResults rename(Name name) {
        return new QuizResults(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
